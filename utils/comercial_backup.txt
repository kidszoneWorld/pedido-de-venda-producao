<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Detalhes dos Pedidos</title>
    <link rel="stylesheet" href="/css/comercial.css">
</head>
<body>
    <h2>Detalhes dos Pedidos</h2>
    <button id="logoutButton">Sair</button>

    <!-- Feedback -->
    <div id="feedback" style="display: none; text-align: center; font-weight: bold; margin: 10px; color: red;"></div>
    
    <!-- Filtros -->
    <div id="filters">
        <label for="representanteFilter">Cód Rep:</label>
        <input type="text" id="representanteFilter" placeholder="Ex.: 37">
        
        <label for="clienteCNPJFilter">Cliente CNPJ:</label>
        <input type="text" id="clienteCNPJFilter" placeholder="Ex.: 08712676000110">
        
        <label for="dataPedidoInicioFilter">Data Pedido (Início):</label>
        <input type="date" id="dataPedidoInicioFilter">
        
        <label for="dataPedidoFimFilter">Data Pedido (Fim):</label>
        <input type="date" id="dataPedidoFimFilter">
        
        <label for="statusFilter">Status:</label>
        <select id="statusFilter">
            <option value="6">6 -Pendente</option>
            <option value="0">0 -Cadastrado</option>
            <option value="1">1 -Cancelado Parcial</option>
            <option value="2">2 -Cancelado Total</option>
            <option value="3">3 -Em Aprovação</option>
            <option value="4">4 -Faturado Parcial</option>
            <option value="5">5 -Faturado Total</option>        
            <option value="7">7 -Reprovado</option>
            <option value="8">8 -Em Andamento</option>
            <option value="9">9 -Reservado</option>
        </select>
        
        <button id="applyFilters">Aplicar Filtros</button>
        <button id="clearFilters">Limpar Filtros</button>
    </div>

    <!-- Tabela -->
    <table id="order-table">
        <thead>
            <tr>
                <th>Data do Pedido</th>
                <th>Cód Pedido</th>
                <th>Status</th>
                <th>Status Separação</th>
                <th>Cód Cliente</th>
                <th>Cliente</th>
                <th>Cliente CNPJ</th>
                <th>Cód Rep</th>
                <th>Representante</th>
                <th>Valor Total</th>
                <th>Transportadora</th>
            </tr>
        </thead>
        <tbody>
            <!-- Dados serão adicionados dinamicamente -->
        </tbody>
    </table>

    <script>
        let ordersData = [];
        
        // Mostrar Feedback
        function showFeedback(message) {
            const feedback = document.getElementById('feedback');
            feedback.style.display = 'block';
            feedback.textContent = message;
        }

        // Ocultar Feedback
        function hideFeedback() {
            const feedback = document.getElementById('feedback');
            feedback.style.display = 'none';
            feedback.textContent = '';
        }

        // Carregar detalhes dos pedidos
        async function loadOrderDetails(status = 6) {

            const representanteFilter = document.getElementById('representanteFilter').value;

            showFeedback("Carregando pedidos, aguarde...");

            try {
                console.log(`Carregando pedidos com status: ${status}`); // Log para verificar o status enviado
                const repQuery = representanteFilter ? `&codRep=${representanteFilter}` : '';
                const response = await fetch(`/api/pedidos?PageNumber=1&PageSize=200&status=${status}${repQuery}`);

                if (response.status === 404) {
                    console.warn(`Nenhum pedido encontrado para o status ${status}`);
                    renderTable([]); // Renderizar tabela vazia
                    showFeedback("Nenhum dado encontrado com os filtros aplicados.");
                    return;
                }

                if (!response.ok) throw new Error(`Erro ao obter pedidos: ${response.statusText}`);
                ordersData = await response.json(); // Carrega todos os pedidos
                console.log('Pedidos carregados no frontend:', ordersData); // Log para verificar os dados carregados
                hideFeedback();
                renderTable(ordersData);
            } catch (error) {
                console.error('Erro ao carregar os detalhes dos pedidos:', error);
                showFeedback("Erro ao carregar dados. Recarregue a página e tente novamente.");
            }
        }

        // Renderizar tabela
        function renderTable(data) {
            const orderTableBody = document.querySelector('#order-table tbody');
            orderTableBody.innerHTML = ''; // Limpar tabela
            data.forEach(order => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${order.dataPedido ? new Date(order.dataPedido).toLocaleDateString('pt-BR') : 'N/A'}</td>
                    <td><a href="detalhes?pedidoId=${order.id}&status=${statusFilter.value}" target="_blank">${order.codigo}</a></td>
                    <td>${order.status}</td>
                    <td>${mapStatusSeparacao(order.statusSeparacao)}</td>
                    <td>${order.cliente.codigo}</td>
                    <td>${order.cliente.nomeAbreviado}</td>
                    <td>${order.cliente.documento.numeroTexto}</td>
                    <td>${order.representante?.codigo || 'Não informado'}</td>
                    <td>${order.representante?.nomeAbreviado || 'Não informado'}</td>
                    <td>${order.detalhes?.valor?.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }) || 'N/A'}</td>
                    <td>${order.detalhes_transporte?.nomeAbreviado || 'Não informado'}</td>
                `;
                orderTableBody.appendChild(row);
            });
        }

        // Mapear Status de Separação
        function mapStatusSeparacao(status) {
            switch (status) {
                case 0: return 'Não Separado';
                case 1: return 'Separado Parcial';
                case 2: return 'Separado Total';
                default: return 'Desconhecido';
            }
        }



        
       // Inicializar ao carregar a página
       document.addEventListener('DOMContentLoaded', async () => {
            try {
                // Faz a requisição para obter os dados da sessão
                const response = await fetch('/session-data');
                if (!response.ok) throw new Error('Erro ao buscar dados da sessão');

                    const sessionData = await response.json();

                    // Define os dados no front-end
                    if (sessionData.isAuthenticated) {
                        window.sessionData = sessionData;

                        const userNumero = window.sessionData?.userNumero || null;
                        const representanteFilter = document.getElementById('representanteFilter');

                        if (userNumero) {
                            representanteFilter.value = userNumero;
                            representanteFilter.disabled = true; // Bloqueia o campo
                        }

                        loadOrderDetails();
                    } else {
                        console.warn('Usuário não autenticado');
                        window.location.href = '/login2'; // Redireciona para a página de login
                    }
                } catch (error) {
                    console.error('Erro ao carregar os dados da sessão:', error);
                }
       });
       
        // Eventos dos botões de filtro
        document.getElementById('applyFilters').addEventListener('click', async () => {
            await loadOrderDetails();
        });

        document.getElementById('statusFilter').addEventListener('change', async function () {
            await loadOrderDetails(this.value);
        });


        // Aplicar Filtros
        async function applyFilters() {
            showFeedback("Buscando dados, aguarde...");
            
            try {
                const representanteFilter = document.getElementById('representanteFilter').value.trim();
                const clienteCNPJFilter = document.getElementById('clienteCNPJFilter').value.trim();
                const dataPedidoInicioFilter = document.getElementById('dataPedidoInicioFilter').value;
                const dataPedidoFimFilter = document.getElementById('dataPedidoFimFilter').value;
                const statusFilter = document.getElementById('statusFilter').value;

                const filteredData = ordersData.filter(order => {
                    const matchRepresentante = !representanteFilter || order.representante?.id?.toString() === representanteFilter;
                    const matchClienteCNPJ = !clienteCNPJFilter || order.cliente.documento.numeroTexto === clienteCNPJFilter;
                    const matchDataPedidoInicio = !dataPedidoInicioFilter || new Date(order.dataPedido) >= new Date(dataPedidoInicioFilter);
                    const matchDataPedidoFim = !dataPedidoFimFilter || new Date(order.dataPedido) <= new Date(dataPedidoFimFilter);
                    const matchStatus = !statusFilter || order.status.toString() === statusFilter;
                    return matchRepresentante && matchClienteCNPJ && matchDataPedidoInicio && matchDataPedidoFim && matchStatus;
                });

                if (filteredData.length === 0) {
                    showFeedback("Nenhum dado encontrado com os filtros aplicados.");
                } else {
                    hideFeedback();
                }

                renderTable(filteredData);
            } catch (error) {
                console.error('Erro ao aplicar filtros:', error);
                showFeedback("Erro ao aplicar os filtros. Tente novamente.");
            }
        }

        // Limpar Filtros
        function clearFilters() {
            document.getElementById('representanteFilter').value = '';
            document.getElementById('clienteCNPJFilter').value = '';
            document.getElementById('dataPedidoInicioFilter').value = '';
            document.getElementById('dataPedidoFimFilter').value = '';
            document.getElementById('statusFilter').value = '';
            renderTable(ordersData);
        }

        // Eventos dos botões de filtro
        document.getElementById('applyFilters').addEventListener('click', applyFilters);
        document.getElementById('clearFilters').addEventListener('click', clearFilters);


        document.getElementById('statusFilter').addEventListener('change', function () {
            const selectedStatus = this.value || 6; // Padrão para "Pendente"
            console.log(`Filtro de status alterado para: ${selectedStatus}`);
            loadOrderDetails(selectedStatus);
        });


        // Função para limpar dados do usuário e redirecionar para a página de login
        document.getElementById('logoutButton').addEventListener('click', async () => {
            // Limpa os dados locais
            sessionStorage.clear();
            localStorage.clear();

            // Faz a requisição ao servidor para destruir a sessão
            await fetch('/logout', { method: 'POST' });

            // Limpa cookies manualmente (como precaução)
            document.cookie.split(";").forEach(cookie => {
                document.cookie = cookie.split("=")[0] + "=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/";
            });

            // Redireciona para a página de login
            window.location.href = '/login2';
       });
       
        // Inicializar tabela ao carregar a página
       // loadOrderDetails();
    </script>
</body>
</html>
